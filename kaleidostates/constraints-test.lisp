(defun zerror (&rest args)  (apply #'error args))(defun z+ (&rest args)  (apply #'+ args))(defun z- (&rest args)  (apply #'- args))(defun z/ (&rest args)  (apply #'/ args))(defun z* (&rest args)  (apply #'* args))(setf a1 (make-kaleidostate))(describe a1)(describe (car (state-lenses-of a1)))(setf (state-lenses-of a1) NIL)(setf a2 (make-kaleidostate))(describe a2)(setf s (make-kaleidostate))(describe s)(setf a (adder a1 a2 s))(describe a)(state-of a1)(update-state a1 3 'rwo)(describe a1)(describe a2)(describe s)(update-state a2 10 'me)(state-of a1)(state-of a2)(state-of s)(lose-state a2 'me);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  Celsius-fahrenheit;;;  example in detail;;;(setf c (make-kaleidostate))(setf u (make-kaleidostate))        (setf v (make-kaleidostate))        (setf w (make-kaleidostate))        (setf x (make-kaleidostate))        (setf y (make-kaleidostate))(setf f (make-kaleidostate))(setf m1 (multiplier c w u))   (setf m2 (multiplier x v u))   (setf a1 (adder v y f))(setf c1 (constant w 9.0))(setf c2 (constant x 5.0))(setf c3 (constant y 32.0))c w u v x y fc1 c2 c3 a1 m1 m2(describe c)(describe f)(describe u)(describe v)(describe w)(describe x)(describe y)(describe m1)(describe m2)(describe a1)(state-of c)(state-of f)(state-of u)(state-of v)(state-of w)(state-of x)(state-of y)(update-state c 30 'rwo)(lose-state c 'rwo)(update-state f 82.4 'me)(informant-of f :state-type 'simple-state)(informant-of f)(informant-of c)(update-state c 28 'me)(update-state c 30 'rwo)(update-state c 30 'me    :state-type 'simple-state)(setf s-c      (find-state-lens c           :state-type           'simple-state))(setf s-f      (find-state-lens f           :state-type           'simple-state))(setf s-u      (find-state-lens u           :state-type           'simple-state))(setf s-v      (find-state-lens v           :state-type           'simple-state))(setf s-w      (find-state-lens w           :state-type           'simple-state))(setf s-x      (find-state-lens x           :state-type           'simple-state))(setf s-y      (find-state-lens y           :state-type           'simple-state))(describe s-c)(describe s-u)(describe s-v)(describe s-w)(describe s-x)(describe s-y)(describe s-f)(setf s-c-f      (find-state-lens c           :state-type           'fancy))(describe s-c-f)(update-state f -40 'me)(lose-state c 'me)(lose-state c 'me :state-type 'simple-state)(lose-state c 'rwo)(lose-state f 'me)(state-of c )(state-of f )(celsius-fahrenheit c f     :state-types 'fancy)(setf mm1      (multiplier c w u         :state-types         '(temp-in-degrees-c           b c)))   (setf mm2      (multiplier x v u         :state-types         '(d e c)))   (setf aa1      (adder v y f         :state-types         '(e f           temp-in-degrees-f)))(setf cc1      (constant w 9.0         :state-type 'b))(setf cc2      (constant x 5.0         :state-type 'd))(setf cc3      (constant y 32.0          :state-type 'f))(update-state c 28 'rwo     :state-type     'temp-in-degrees-c)(state-of c      :state-type     'temp-in-degrees-c)(state-of f      :state-type     'temp-in-degrees-f)      (update-state f 82.4 'me)(informant-of f :state-type 'fancy)(informant-of f)(update-state c 30 'me)(update-state c 30 'rwo)(update-state c 30 'me    :state-type 'fancy)(setf s-c      (find-state-lens c           :state-type           'simple-state))(setf s-f      (find-state-lens f           :state-type           'simple-state))(setf s-u      (find-state-lens u           :state-type           'simple-state))(setf s-v      (find-state-lens v           :state-type           'simple-state))(setf s-w      (find-state-lens w           :state-type           'simple-state))(setf s-x      (find-state-lens x           :state-type           'simple-state))(setf s-y      (find-state-lens y           :state-type           'simple-state))(describe s-c)(describe s-u)(describe s-v)(describe s-w)(describe s-x)(describe s-y)(describe s-f);;;;;;;;;;;;;;;;;;;;;  Testing slot-lenses;;;(defclass foo (kaleidostate)  ((s :accessor s-of :initform 3)   (t :reader t-of :initform 3)   ))(defmethod s-of :before ((self foo))  (print "s-of"))(defmethod (setf s-of) :before (new-value (self foo))  (print "setf s-of"))(defmethod t-of :before ((self foo))  (print "t-of"))(defmethod set-t ((x foo) n)  (print "set-t")  (setf (slot-value x 't) n))(setf bar (make-instance 'foo))(setf sl1 (make-state-lens :type 'slot-lens                           :state-type 's1                           :accessor 's-of))(setf sl2 (make-state-lens :type 'slot-lens                           :state-type 's2                           :slot-name 's))(setf sl3 (make-state-lens :type 'slot-lens                           :state-type 't1                           :slot-name 't                           :reader 't-of))(setf sl4 (make-state-lens :type 'slot-lens                           :state-type 't2                           :slot-name 't                           :reader 't-of                           :writer 'set-t))(describe sl1)(describe sl2)(describe sl3)(describe sl4)(loop for sl in (list sl1 sl2 sl3 sl4)      do (add-state-lens sl bar))(describe bar)(update-state bar 10 'me :state-type 's1)(state-of bar :state-type 's1)(update-state bar 10 'me :state-type 's2)(state-of bar :state-type 's2)(update-state bar 10 'me :state-type 't1)(state-of bar :state-type 't1)(update-state bar 10 'me :state-type 't2)(state-of bar :state-type 't2)