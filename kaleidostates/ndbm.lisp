(defclass n-dimensional-bar-monitor (monitor)((kaleidostate-array  :accessor kaleidostate-array-of  :initarg :kaleidostate-array  :initform NIL  :documentation  "The slot for the kaleidostate which has a state-lens that ~   gives view of an n-dimensional-array to be constrained") (view  :accessor view-of  :initarg :view  :initform NIL  :documentation  "The slot which holds the view which contains n bar-sliders that ~   constrain the array above") (sliders  :accessor sliders-of  :initarg :sliders  :initform '()  :documentation  "A list of the bar-sliders used in the monitor-constraint") (n  :accessor n  :initarg :n  :initform 1  :documentation  "The slot which holds the dimension of the bar-monitor"   )) (:documentation  "An array is constrained by n bar-sliders"))(defmethod n-dimensional-bar-monitor ((ks kaleidostate)                                   &key state-type (n 1) (min 0) (max 10) (level 1)                                  viewport)   (let ((positions (list (list 0 1 1 3) (list (+ n 2) (+ n 4) 0 .5) (list 1 (+ n 3) 3 4)))         (subviews (list (axis :orientation :vertical :min min :max max)                         (control-button :text "UPDATE")                         (text-view :text (format NIL "~s-dimensional Bar Monitor ~%" n))))         (sliders '())         cb         view         ndbm         )     (loop for i from 1 to n do         (<- positions (cons (list i (+ i 1) 1 3) positions))         (<- sliders             (cons (bar-slider :orientation :vertical                            :min min                            :max max                            :level level                            :color wb:*red-color*                            :draw? NIL) sliders)))     (<- subviews (glue (reverse sliders) subviews))     (loop for i from 1 to n do           (<- positions (cons (list i (+ i 1) 0.5 1) positions))           (<- subviews                (cons (text-view :text (format NIL "~s" i)                               :justification :centre) subviews))           )     (<- view (view-layout :subviews subviews                           :positions positions                           :draw? NIL))     (<- ndbm (make-instance 'n-dimensional-bar-monitor                :kaleidostate-array ks                :view view                :sliders sliders                :n n))     (constrain ks ndbm :accessor 'kaleidostate-array-of :state-type state-type)     (<- cb (eref subviews (+ 1 (* 2 n))))     (setf (left-fn-of cb)           #'(lambda ()               (let ((list '()))                 (highlight-view cb)                 (loop for i from n downto 1 do                       (<- list (cons (slider-level-of (eref sliders (- i 1)))                                       list)))                 (update-state ks (array list :dimensions (list n 1))                               ndbm :state-type state-type)                 (downlight-view cb)                 )               )           )   (draw-view view :viewport viewport)   ndbm))(defmethod update-monitor-display ((ndbm n-dimensional-bar-monitor) informant)  (let* ((vector (state-of informant :as-seen-by ndbm))         (dim-vector (eref (dimensions-of vector) 0)))    (if (not (= dim-vector (n ndbm)))      (error "Length of vector not same as dimension of bar-monitor"))    (loop for i from (- dim-vector 1) downto 0 do           (setf (slider-level-of (eref (sliders-of ndbm) i)) (eref vector i 0)))    (reposition-view (view-of ndbm))    )  ) 