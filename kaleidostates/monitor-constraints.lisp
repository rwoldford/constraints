;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                               monitor-constraints.lisp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Copyright (c) 1990 Statistical Computing Laboratory, University of Waterloo;;;;;;;;;  Authors:;;;     R.W. Oldford 1990.;;;;;;;;;----------------------------------------------------------------------------------;;;;;;;;;;;;   Monitor-constraints;;;;;;----------------------------------------------------------------------------------(defclass monitor (constraint)  (   #|(monitored-object    :accessor monitored-object-of :initarg :monitored-object    :initform NIL    :documentation    "The object being monitored.")   (state-type    :accessor state-type-of :initarg :state-type :initform 'simple-state    :documentation    "The state-type that is being monitored on the object.")|#   )  (:documentation   "A monitor is a constraint that displays information on the state ~    of its monitored-object as determined by state-type.")  )(defmethod process-update-info ((m monitor) informant)  (when (find informant (participants-of m))    (update-monitor-display m informant)))(defgeneric update-monitor-display  (monitor monitored-object))(defclass print-probe (monitor)  ((destination    :accessor destination-of :initarg :destination :initform T    :documentation    "Destination here is as defined for the Common Lisp format ~     function.  Here the default is NIL.")   (control-string    :accessor control-string-of :initarg :control-string    :initform "Current state of ~s for state-type ~s is ~%~               ~s."    :documentation    "Control-string here is as defined for the Common Lisp format ~     function.  Default uses two arguments: the monitored object and the ~     value of its current state.")   (arg-supply-fn    :accessor arg-supply-fn-of :initarg :arg-supply-fn    :initform #'(lambda (m-o s-t)                  (list m-o s-t (state-of m-o :state-type s-t)))    :documentation    "arg-supply-fn is a function of two arguments: the monitored-object ~     and the state-type of interest.  When invoked, it must return a list ~     of the arguments to be supplied to the control-string of the monitor.")   )  (:documentation "A monitor that prints information to a specified destination.")  )(defmethod update-monitor-display  ((p print-probe) informant)  (apply #'format         (destination-of p)         (control-string-of p)         (funcall (arg-supply-fn-of p) informant (state-type informant p)))  )(defun monitor (obj &rest keyword-pairs &key (type 'print-probe)                    (state-type 'simple-state) &allow-other-keys)    (let ((monitor (apply #'make-instance type                                :allow-other-keys  T keyword-pairs)))    (constrain obj monitor :state-type state-type)    monitor))