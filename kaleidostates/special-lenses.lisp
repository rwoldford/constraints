;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                               special-lenses.lisp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Copyright (c) 1990 Statistical Computing Laboratory, University of Waterloo;;;;;;;;;  Authors:;;;     R.W. Oldford 1990.;;;;;;;;;----------------------------------------------------------------------------------;;;;;;--------------------------------------------------------------------------;;;;;;  slot-lenses;;;;;;  The state is the value of a particular;;;  slot on of the kaleidostate.;;;;;;;;;--------------------------------------------------------------------------(defclass slot-lens  (state-lens)  ((slot-name     :reader slot-name-of     :initarg :slot-name     :initform NIL     :documentation "The name of the slot viewed by this lens. ~                     slot-name must be non-NIL.")   (accessor      :reader accessor-of :initarg :accessor :initform NIL      :documentation      "The name of the accessor function, if any, to access the ~       viewed slot.")   (reader      :reader reader-of :initarg :reader :initform NIL      :documentation      "The name of the reader function, if any, to access the ~       viewed slot.")   (writer      :reader writer-of :initarg :writer :initform NIL      :documentation      "The name of the writer function, if any, to access the ~       viewed slot.")   ;; Now the changes to the inherited slot properties   (update-info :initform NIL)   (update-function     :initform NIL     :documentation "When invoked this function sets the value of the ~                     viewed slot to the update-info.")   (get-function     :initform NIL     :documentation "When invoked this function gets the value of the ~                     viewed slot.")   )  (:documentation "A lens through which a kaleidostate is viewed ~                   to interact with its perceived state.")  )(defmethod initialize-instance :after  ((self slot-lens) &rest initargs)  ;; fix the slot as requested  (let ((w (writer-of self)) (r (reader-of self))        (a (accessor-of self)) (s (slot-name-of self)))    ;; Check for sufficient information here    (when (and (not a) (not s) (not (and r w)))      (zerror       "When creating an instance of the class ~s, at least one ~        of :accessor, :slot-name, or *both* :reader and :writer ~        must be specified at the time of creation!"       (class-name (class-of self))))    (labels ((set-value-fn ()                 (cond                  (a                   (eval `(function                           (lambda (k val)                                (setf (,a k) val)))))                  (w                   (eval `(function                           (lambda (k val)                                (,w k val)))))                  (T                   (eval `(function                           (lambda (k val)                                (setf (slot-value k ,s) val)))))))             (set-value! (obj val)                 (funcall (set-value-fn) obj val))             (get-value-fn ()                 (cond                  (a                   (eval `(function                           (lambda (k) (,a k)))))                  (r                   (eval `(function                           (lambda (k) (,r k)))))                  (T                   (eval `(function                           (lambda (k) (slot-value k ,s)))))))             (get-value! (obj)                 (funcall (get-value-fn) obj)))                  (unless (update-function-of self)        (setf (update-function-of self)              (function  (lambda (kaleidostate lens update-info)                           (declare (ignore lens))                           (set-value! kaleidostate update-info)))))      (unless (get-function-of self)        (setf (get-function-of self)              (function  (lambda (kaleidostate lens)                           (declare (ignore lens))                           (get-value! kaleidostate)))))      )    )  )      