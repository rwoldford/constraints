(defclass view-constraint (constraint)  ((linked-views :accessor linked-views-of                 :initarg :linked-views                 :initform '())))(defmethod add-participant   ((self view-constraint) (c-p kaleidostate)   &key state-type accessor reader writer (with-setf? T))  (setf (linked-views-of self) (push c-p (linked-views-of self)))  c-p)(defmethod remove-participant   ((self view-constraint) (c-p kaleidostate)   &key state-type accessor reader writer (with-setf? T))    (setf (linked-views-of self) (remove c-p (linked-views-of self)))  c-p)(defmethod process-new-state ((self view-constraint) informant)  (loop for v in (linked-views-of self)        when (not (eq v informant))        do (set-state v (state-of informant) self)))(defmethod process-lost-state ((self view-constraint) informant)  (declare (ignore informant)))