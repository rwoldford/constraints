(defclass foo ()  ((s :initform NIL :accessor s-of)))(setf f (make-instance 'foo))(defun bar (a )  (let (the-fun )    (setf the-fun          `(function (lambda (y)                       (setf (,a y) 10))))    the-fun))(bar 's-of)(funcall (eval (bar 's-of)) f)(describe f)(setf a 900)(defun bar (a )  (let (the-fun )    (setf the-fun          `(function (lambda (y z)                       (setf (,a y) z))))    (eval the-fun)))(bar 's-of)(funcall (bar 's-of) f 1000)(defun foo-bar (b w x)  (funcall (bar b) w x))(foo-bar 's-of f 300)    (describe f)(defun bar (c ks &key reader writer (with-setf? T))  (when writer    (flet ((set-value-fn ()                         (print 'a)                 (if with-setf?                   (eval `(function                           (lambda (k val)                                (setf (,writer k) val))))                   (eval `(function                           (lambda (k val)                                (,writer k val))))))           (get-value-fn ()                     (eval                      `(function                           (lambda (k)                                (,reader k))))))      (if reader        (let ((current-slot-value (funcall (get-value-fn) c)))          (print 'c)          (print current-slot-value)          (if (and current-slot-value (not (eq ks current-slot-value)))            (error "Nothing was done."))))      (funcall (set-value-fn) c ks))))(describe f)(bar f 100 :reader 's-of :writer 's-of)